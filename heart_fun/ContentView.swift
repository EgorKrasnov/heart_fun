import SwiftUI
import Combine
import CoreBluetooth
import Charts   // iOS 16+
import ActivityKit

// ViewModel –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—É–ª—å—Å–æ–º–µ—Ç—Ä–æ–º
class HeartRateViewModel: NSObject, ObservableObject, CBCentralManagerDelegate, CBPeripheralDelegate {
    @Published var heartRate: Int = 0
    @Published var connectionStatus: String = "üîç –ü–æ–∏—Å–∫..."
    @Published var deviceName: String? = nil
    @Published var heartRateHistory: [(time: Date, bpm: Int, rr: [Double])] = []
    
    private var centralManager: CBCentralManager!
    private var heartRatePeripheral: CBPeripheral?
    
    private static var startedLive = false
    private static var liveActivity: Activity<HeartActivityAttributes>?
    
    let heartRateServiceCBUUID = CBUUID(string: "180D")
    let heartRateMeasurementCharacteristicCBUUID = CBUUID(string: "2A37")
    
    override init() {
        super.init()
        print("üî• HeartRateViewModel init")
        centralManager = CBCentralManager(delegate: self, queue: nil)
    }
    
    // MARK: - Bluetooth lifecycle
    func centralManagerDidUpdateState(_ central: CBCentralManager) {
        print("üì° centralManagerDidUpdateState: \(central.state.rawValue)")
        if central.state == .poweredOn {
            connectionStatus = "üîç –ü–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤..."
            print("üîç –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Å–µ—Ä–≤–∏—Å—É \(heartRateServiceCBUUID)")
            centralManager.scanForPeripherals(withServices: [heartRateServiceCBUUID], options: nil)
        } else {
            connectionStatus = "‚ùå Bluetooth –≤—ã–∫–ª—é—á–µ–Ω"
        }
    }
    
    func centralManager(_ central: CBCentralManager,
                        didDiscover peripheral: CBPeripheral,
                        advertisementData: [String : Any],
                        rssi RSSI: NSNumber) {
        print("‚úÖ –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: \(peripheral.name ?? "–ë–µ–∑ –∏–º–µ–Ω–∏"), RSSI: \(RSSI)")
        heartRatePeripheral = peripheral
        heartRatePeripheral?.delegate = self
        deviceName = peripheral.name ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"
        connectionStatus = "‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ..."
        centralManager.stopScan()
        centralManager.connect(peripheral, options: nil)
    }
    
    func centralManager(_ central: CBCentralManager, didConnect peripheral: CBPeripheral) {
        print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ \(peripheral.name ?? "Unknown")")
        connectionStatus = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ"
        peripheral.discoverServices([heartRateServiceCBUUID])
    }
    
    func centralManager(_ central: CBCentralManager, didDisconnectPeripheral peripheral: CBPeripheral, error: Error?) {
        print("‚ö†Ô∏è –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç \(peripheral.name ?? "Unknown"), error: \(String(describing: error))")
        connectionStatus = "‚ö†Ô∏è –û—Ç–∫–ª—é—á–µ–Ω–æ"
        deviceName = nil
        heartRatePeripheral = nil
        centralManager.scanForPeripherals(withServices: [heartRateServiceCBUUID], options: nil)
    }
    
    func peripheral(_ peripheral: CBPeripheral, didDiscoverServices error: Error?) {
        if let error = error {
            print("‚ùå –û—à–∏–±–∫–∞ discoverServices: \(error)")
        }
        guard let services = peripheral.services else { return }
        print("üìë –ù–∞–π–¥–µ–Ω—ã —Å–µ—Ä–≤–∏—Å—ã: \(services.map{$0.uuid})")
        for service in services {
            peripheral.discoverCharacteristics([heartRateMeasurementCharacteristicCBUUID], for: service)
        }
    }
    
    func peripheral(_ peripheral: CBPeripheral,
                    didDiscoverCharacteristicsFor service: CBService,
                    error: Error?) {
        if let error = error {
            print("‚ùå –û—à–∏–±–∫–∞ discoverCharacteristics: \(error)")
        }
        guard let characteristics = service.characteristics else { return }
        print("üîé –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ \(service.uuid): \(characteristics.map{$0.uuid})")
        for characteristic in characteristics {
            if characteristic.uuid == heartRateMeasurementCharacteristicCBUUID {
                print("üì• –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ HR characteristic \(characteristic.uuid)")
                peripheral.setNotifyValue(true, for: characteristic)
            }
        }
    }
    
    func peripheral(_ peripheral: CBPeripheral,
                    didUpdateValueFor characteristic: CBCharacteristic,
                    error: Error?) {
        if let error = error {
            print("‚ùå –û—à–∏–±–∫–∞ didUpdateValueFor: \(error)")
        }
        if characteristic.uuid == heartRateMeasurementCharacteristicCBUUID,
           let data = characteristic.value {
            print("üì© –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ HR: \(data as NSData)")
            parseHeartRateData(data)
            startLiveActivityIfNeeded()
            updateLiveActivity()
        }
    }
    
    // MARK: - –ü–∞—Ä—Å–∏–Ω–≥ HR + RR –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    private func parseHeartRateData(_ data: Data) {
        let reportData = [UInt8](data)
        let flag = reportData[0]
        let hrFormatUInt16 = (flag & 0x01) != 0
        
        var bpm: UInt16 = 0
        var index = 1
        
        if hrFormatUInt16 {
            bpm = UInt16(reportData[1]) | (UInt16(reportData[2]) << 8)
            index += 2
        } else {
            bpm = UInt16(reportData[1])
            index += 1
        }
        
        var rrIntervals: [Double] = []
        while index + 1 < reportData.count {
            let rr = UInt16(reportData[index]) | (UInt16(reportData[index+1]) << 8)
            let rrMs = Double(rr) / 1024.0 * 1000.0
            rrIntervals.append(rrMs)
            index += 2
        }
        
        DispatchQueue.main.async {
            let now = Date()
            self.heartRate = Int(bpm)
            self.heartRateHistory.append((time: now, bpm: Int(bpm), rr: rrIntervals))
            if self.heartRateHistory.count > 500 {
                self.heartRateHistory.removeFirst()
            }
            print("‚ù§Ô∏è BPM = \(bpm), RR = \(rrIntervals)")
        }
    }
    
    // MARK: - –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤ CSV
    func exportCSV() -> URL? {
        var csv = "timestamp,heart_rate,rr_intervals_ms\n"
        let formatter = ISO8601DateFormatter()
        
        for entry in heartRateHistory {
            let ts = formatter.string(from: entry.time)
            let rrJoined = entry.rr.map { String(format: "%.2f", $0) }.joined(separator: "|")
            csv += "\(ts),\(entry.bpm),\(rrJoined)\n"
        }
        
        do {
            let fileURL = FileManager.default.temporaryDirectory.appendingPathComponent("heart_rate_history.csv")
            try csv.write(to: fileURL, atomically: true, encoding: .utf8)
            print("üíæ –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ \(fileURL)")
            return fileURL
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV: \(error)")
            return nil
        }
    }
    
    // MARK: - Live Activity
    func startLiveActivityIfNeeded() {
        guard !Self.startedLive else { return }
        guard ActivityAuthorizationInfo().areActivitiesEnabled else {
            print("‚ö†Ô∏è Live Activities –æ—Ç–∫–ª—é—á–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return
        }

        let initial = HeartActivityAttributes.ContentState(heartRate: heartRate)
        let attrs   = HeartActivityAttributes(deviceName: deviceName ?? "–ü—É–ª—å—Å–æ–º–µ—Ç—Ä")

        do {
            if #available(iOS 17.0, *) {
                let content = ActivityContent(state: initial, staleDate: nil)
                Self.liveActivity = try Activity.request(attributes: attrs, content: content)
            } else {
                Self.liveActivity = try Activity.request(attributes: attrs, contentState: initial)
            }
            Self.startedLive = true
            print("‚úÖ Live Activity –∑–∞–ø—É—â–µ–Ω–∞")
        } catch {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Live Activity: \(error)")
        }
    }

    func updateLiveActivity() {
        let state = HeartActivityAttributes.ContentState(heartRate: heartRate)
        Task {
            if let act = Self.liveActivity {
                if #available(iOS 17.0, *) {
                    await act.update(ActivityContent(state: state, staleDate: nil))
                } else {
                    await act.update(using: state)
                }
                print("üîÑ Live Activity –æ–±–Ω–æ–≤–ª–µ–Ω–∞: \(heartRate) bpm")
            }
        }
    }

    func stopLiveActivity() {
        Task {
            if let act = Self.liveActivity {
                if #available(iOS 17.0, *) {
                    await act.end(nil, dismissalPolicy: .immediate)
                } else {
                    await act.end(using: nil, dismissalPolicy: .immediate)
                }
                Self.liveActivity = nil
                Self.startedLive = false
                print("üõë Live Activity –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            }
        }
    }
}


// MARK: - UIKit-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è Share Sheet
struct ActivityView: UIViewControllerRepresentable {
    let activityItems: [Any]
    let applicationActivities: [UIActivity]? = nil
    
    func makeUIViewController(context: Context) -> UIActivityViewController {
        UIActivityViewController(activityItems: activityItems, applicationActivities: applicationActivities)
    }
    
    func updateUIViewController(_ uiViewController: UIActivityViewController, context: Context) {}
}

// MARK: - SwiftUI —ç–∫—Ä–∞–Ω
struct ContentView: View {
    @StateObject private var viewModel = HeartRateViewModel()
    @State private var showShareSheet = false
    @State private var exportURL: URL?
    
    var body: some View {
        VStack(spacing: 20) {
            Text("‚ù§Ô∏è Heart Rate Monitor")
                .font(.title2)
                .padding(.top)
            
            Text(viewModel.connectionStatus)
                .font(.headline)
                .foregroundColor(.blue)
            
            if let name = viewModel.deviceName {
                Text("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: \(name)")
                    .font(.subheadline)
            }
            
            Text("\(viewModel.heartRate) bpm")
                .font(.system(size: 48, weight: .bold, design: .rounded))
                .foregroundColor(.red)
                .padding()
            
            if #available(iOS 16.0, *) {
                Chart {
                    ForEach(Array(viewModel.heartRateHistory.enumerated()), id: \.offset) { index, entry in
                        LineMark(
                            x: .value("Time", index),
                            y: .value("HR", entry.bpm)
                        )
                        .foregroundStyle(.red)
                    }
                }
                .frame(height: 200)
                .padding()
            } else {
                Text("–ì—Ä–∞—Ñ–∏–∫ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ iOS 16+")
                    .font(.footnote)
                    .foregroundColor(.gray)
            }
            
            // –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
            Button("üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ CSV") {
                if let url = viewModel.exportCSV() {
                    exportURL = url
                    showShareSheet = true
                }
            }
            .padding()
            
            // –¢–µ—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ Live Activity
            HStack {
                Button("üöÄ –°—Ç–∞—Ä—Ç Live Activity") {
                    viewModel.startLiveActivityIfNeeded()
                }
                .buttonStyle(.borderedProminent)
                
                Button("üõë –°—Ç–æ–ø") {
                    viewModel.stopLiveActivity()
                }
                .buttonStyle(.bordered)
            }
            .padding(.top, 10)
            
            Spacer()
        }
        .padding()
        .sheet(isPresented: $showShareSheet) {
            if let exportURL = exportURL {
                ActivityView(activityItems: [exportURL])
            }
        }
    }
}
